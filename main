import textwrap
from abc import ABC, abstractclassmethod, abstractproperty
from datetime import datetime


class Usuario:
    def __init__(self, local):
        self.local = local
        self.contas_vinculadas = []

    def efetuar_transacao(self, conta, operacao):
        operacao.registrar(conta)

    def vincular_conta(self, conta):
        self.contas_vinculadas.append(conta)


class Pessoa(Usuario):
    def __init__(self, nome_completo, nascimento, documento, local):
        super().__init__(local)
        self.nome_completo = nome_completo
        self.nascimento = nascimento
        self.documento = documento


class ContaBancaria:
    def __init__(self, identificador, usuario):
        self._saldo_disponivel = 0
        self._identificador = identificador
        self._codigo_agencia = "0001"
        self._usuario = usuario
        self._log_transacoes = Registro()

    @classmethod
    def gerar_conta(cls, usuario, identificador):
        return cls(identificador, usuario)

    @property
    def saldo_disponivel(self):
        return self._saldo_disponivel

    @property
    def identificador(self):
        return self._identificador

    @property
    def codigo_agencia(self):
        return self._codigo_agencia

    @property
    def usuario(self):
        return self._usuario

    @property
    def log_transacoes(self):
        return self._log_transacoes

    def realizar_saque(self, quantia):
        saldo = self.saldo_disponivel
        excedente = quantia > saldo

        if excedente:
            print("\n@@@ Saque não permitido. Saldo insuficiente. @@@")

        elif quantia > 0:
            self._saldo_disponivel -= quantia
            print("\n=== Saque efetuado com sucesso! ===")
            return True

        else:
            print("\n@@@ Valor inválido para saque. @@@")

        return False

    def realizar_deposito(self, quantia):
        if quantia > 0:
            self._saldo_disponivel += quantia
            print("\n=== Depósito efetuado com sucesso! ===")
        else:
            print("\n@@@ Valor inválido para depósito. @@@")
            return False

        return True


class ContaComum(ContaBancaria):
    def __init__(self, identificador, usuario, teto=500, max_saques=3):
        super().__init__(identificador, usuario)
        self._teto = teto
        self._max_saques = max_saques

    def realizar_saque(self, quantia):
        total_saques = len(
            [t for t in self.log_transacoes.transacoes if t["tipo"] == Retirada.__name__]
        )

        limite_ultrapassado = quantia > self._teto
        saques_excedidos = total_saques >= self._max_saques

        if limite_ultrapassado:
            print("\n@@@ Saque excede limite permitido. @@@")

        elif saques_excedidos:
            print("\n@@@ Limite de saques atingido. @@@")

        else:
            return super().realizar_saque(quantia)

        return False

    def __str__(self):
        return f"""\
            Agência:\t{self.codigo_agencia}
            Conta:\t\t{self.identificador}
            Cliente:\t{self.usuario.nome_completo}
        """


class Registro:
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes

    def registrar_operacao(self, operacao):
        self._transacoes.append(
            {
                "tipo": operacao.__class__.__name__,
                "valor": operacao.valor,
                "data": datetime.now().strftime("%d-%m-%Y %H:%M:%S"),
            }
        )


class Operacao(ABC):
    @property
    @abstractproperty
    def valor(self):
        pass

    @abstractclassmethod
    def registrar(self, conta):
        pass


class Retirada(Operacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        sucesso = conta.realizar_saque(self.valor)

        if sucesso:
            conta.log_transacoes.registrar_operacao(self)


class Credito(Operacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        sucesso = conta.realizar_deposito(self.valor)

        if sucesso:
            conta.log_transacoes.registrar_operacao(self)


def exibir_menu():
    menu = """\n
    ============== MENU ==============
    [d]\tDepósito
    [s]\tSaque
    [e]\tExtrato
    [nc]\tNova Conta
    [lc]\tContas Ativas
    [nu]\tNovo Usuário
    [q]\tSair
    => """
    return input(textwrap.dedent(menu))


def localizar_usuario(documento, usuarios):
    encontrados = [u for u in usuarios if u.documento == documento]
    return encontrados[0] if encontrados else None


def obter_conta(usuario):
    if not usuario.contas_vinculadas:
        print("\n@@@ Usuário sem contas ativas! @@@")
        return

    return usuario.contas_vinculadas[0]


def operacao_deposito(usuarios):
    doc = input("CPF do usuário: ")
    usuario = localizar_usuario(doc, usuarios)

    if not usuario:
        print("\n@@@ Usuário não localizado. @@@")
        return

    quantia = float(input("Valor do depósito: "))
    operacao = Credito(quantia)

    conta = obter_conta(usuario)
    if not conta:
        return

    usuario.efetuar_transacao(conta, operacao)


def operacao_saque(usuarios):
    doc = input("CPF do usuário: ")
    usuario = localizar_usuario(doc, usuarios)

    if not usuario:
        print("\n@@@ Usuário não localizado. @@@")
        return

    quantia = float(input("Valor do saque: "))
    operacao = Retirada(quantia)

    conta = obter_conta(usuario)
    if not conta:
        return

    usuario.efetuar_transacao(conta, operacao)


def ver_extrato(usuarios):
    doc = input("CPF do usuário: ")
    usuario = localizar_usuario(doc, usuarios)

    if not usuario:
        print("\n@@@ Usuário não localizado. @@@")
        return

    conta = obter_conta(usuario)
    if not conta:
        return

    print("\n========== EXTRATO ==========")
    transacoes = conta.log_transacoes.transacoes

    historico = ""
    if not transacoes:
        historico = "Nenhuma movimentação registrada."
    else:
        for t in transacoes:
            historico += f"\n{t['tipo']}:\n\tR$ {t['valor']:.2f}"

    print(historico)
    print(f"\nSaldo Atual:\n\tR$ {conta.saldo_disponivel:.2f}")
    print("===============================")


def novo_usuario(usuarios):
    doc = input("CPF (somente números): ")
    if localizar_usuario(doc, usuarios):
        print("\n@@@ Usuário já cadastrado! @@@")
        return

    nome = input("Nome completo: ")
    nascimento = input("Data de nascimento (dd-mm-aaaa): ")
    local = input("Endereço (rua, número - bairro - cidade/UF): ")

    novo = Pessoa(nome_completo=nome, nascimento=nascimento, documento=doc, local=local)
    usuarios.append(novo)
    print("\n=== Usuário registrado com sucesso! ===")


def nova_conta(numero, usuarios, contas):
    doc = input("CPF do usuário: ")
    usuario = localizar_usuario(doc, usuarios)

    if not usuario:
        print("\n@@@ Usuário não localizado. Criação de conta cancelada. @@@")
        return

    conta = ContaComum.gerar_conta(usuario=usuario, identificador=numero)
    contas.append(conta)
    usuario.vincular_conta(conta)

    print("\n=== Conta criada com sucesso! ===")


def exibir_contas(contas):
    for c in contas:
        print("=" * 100)
        print(textwrap.dedent(str(c)))


def executar_sistema():
    usuarios = []
    contas = []

    while True:
        opcao = exibir_menu()

        if opcao == "d":
            operacao_deposito(usuarios)

        elif opcao == "s":
            operacao_saque(usuarios)

        elif opcao == "e":
            ver_extrato(usuarios)

        elif opcao == "nu":
            novo_usuario(usuarios)

        elif opcao == "nc":
            id_nova_conta = len(contas) + 1
            nova_conta(id_nova_conta, usuarios, contas)

        elif opcao == "lc":
            exibir_contas(contas)

        elif opcao == "q":
            break

        else:
            print("\n@@@ Opção inválida, tente novamente. @@@")


executar_sistema()
